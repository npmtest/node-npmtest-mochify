{"/home/travis/build/npmtest/node-npmtest-mochify/test.js":"/* istanbul instrument in package npmtest_mochify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mochify/lib.npmtest_mochify.js":"/* istanbul instrument in package npmtest_mochify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mochify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mochify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mochify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mochify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mochify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mochify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mochify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mochify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mochify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mochify.__dirname + '/lib.npmtest_mochify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/lib/mochify.js":"/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar browserify = require('browserify');\nvar watchify   = require('watchify');\nvar coverify   = require('coverify');\nvar glob       = require('glob');\nvar mocaccino  = require('mocaccino');\nvar webdriver  = require('min-wd');\nvar resolve    = require('resolve');\nvar cover      = require('./cover');\nvar node       = require('./node');\nvar phantom    = require('./phantom');\nvar consolify  = require('./consolify');\nvar trace      = require('./trace');\nvar args       = require('./args');\n\n\nmodule.exports = function (_, opts) {\n  if (_ === null) {\n    _ = './test/*.js';\n  } else if (typeof _ !== 'string') {\n    opts = _;\n    _ = './test/*.js';\n  }\n  if (!opts) {\n    opts = {};\n  }\n  if (!opts.output) {\n    opts.output = process.stdout;\n  }\n  if (opts.recursive) {\n    if (!_) {\n      _ = './test/**/*.js';\n    } else {\n      var p = _.indexOf('*');\n      if (p === -1) {\n        _ += '/**/*.js';\n      } else {\n        _ = _.substring(0, p) + '**/' + _.substring(p);\n      }\n    }\n  }\n\n  Object.keys(args.defaults).forEach(function (key) {\n    if (!opts.hasOwnProperty(key)) {\n      opts[key] = args.defaults[key];\n    }\n  });\n\n  if (opts.debug) {\n    if (opts.node) {\n      console.log('--debug does not work with --node\\n');\n      process.exit(1);\n    }\n    if (opts.wd) {\n      console.log('--debug does not work with --wd\\n');\n      process.exit(1);\n    }\n  }\n\n  if (opts.bundle && !opts.consolify) {\n    console.log('--bundle must be used with --consolify option\\n');\n    process.exit(1);\n  }\n\n  if (opts.invert && !opts.grep) {\n    console.log('--invert must be used with --grep option\\n');\n    process.exit(1);\n  }\n\n  var entries = [];\n  var globs = _.split(' ');\n  globs.forEach(function (arg) {\n    if (arg.indexOf('*') === -1) {\n      entries.push(arg);\n    } else {\n      Array.prototype.push.apply(entries, glob.sync(arg, opts.glob || {}));\n    }\n  });\n  if (!entries.length) {\n    console.error('Error: Nothing found for \"' + globs.join('\" or \"') + '\".\\n');\n    process.exit(1);\n  }\n\n  function error(err) {\n    console.error(String(err) + '\\n');\n    process.exitCode = 1;\n  }\n\n  var brOpts = {\n    debug        : true,\n    cache        : {},\n    packageCache : {}\n  };\n\n  if (opts.node) {\n    brOpts.builtins = false;\n    brOpts.commondir = false;\n    brOpts.detectGlobals = false;\n    brOpts.insertGlobalVars = ['__dirname', '__filename'];\n  }\n  brOpts.extensions = opts.extension;\n  brOpts.browserField = opts['browser-field'];\n  brOpts.paths = opts.path;\n\n  var b = browserify(brOpts);\n\n  var mocaccinoOpts = {\n    reporter        : opts.reporter,\n    reporterOptions : opts.reporterOptions,\n    ui              : opts.ui,\n    node            : opts.node,\n    yields          : opts.yields,\n    timeout         : opts.timeout,\n    grep            : opts.grep,\n    invert          : opts.invert,\n    colors          : opts.colors,\n    noColors        : opts.noColors\n  };\n\n  if (opts.consolify) {\n    b.plugin(consolify, opts);\n  } else if (opts.node) {\n    b.plugin(node, opts);\n  } else if (opts.wd) {\n    var wdOpts = {};\n    if (opts.url) {\n      wdOpts.url = opts.url;\n    }\n    if (opts['wd-file']) {\n      wdOpts.wdFile = opts['wd-file'];\n    }\n    b.plugin(webdriver, wdOpts);\n    if (process.stdout.getWindowSize) {\n      mocaccinoOpts.windowWidth = process.stdout.getWindowSize()[0];\n    }\n    b.pipeline.get('wrap').push(trace());\n  } else {\n    b.plugin(phantom, opts);\n  }\n\n  entries.forEach(function (entry) {\n    b.add(entry);\n  });\n\n  b.plugin(mocaccino, mocaccinoOpts);\n\n  if (opts.external) {\n    [].concat(opts.external).forEach(function (x) {\n      b.external(x);\n    });\n  }\n  if (opts.plugin) {\n    [].concat(opts.plugin).forEach(function (p) {\n      if (typeof p === 'string') {\n        b.plugin(p, {});\n      } else {\n        b.plugin(p._.shift(), p);\n      }\n    });\n  }\n  if (opts.transform) {\n    [].concat(opts.transform).forEach(function (t) {\n      if (typeof t === 'string') {\n        b.transform({}, t);\n      } else {\n        b.transform(t, t._.shift());\n      }\n    });\n  }\n  if (opts.require) {\n    [].concat(opts.require).forEach(function (r) {\n      b.require(resolve.sync(r, {\n        basedir: process.cwd()\n      }), {\n        expose: r\n      });\n    });\n  }\n\n  if (opts.cover) {\n    b.transform(coverify);\n    b.plugin(cover);\n  }\n\n  b.on('error', error);\n  b.on('bundle', function (out) {\n    out.on('error', error);\n    out.pipe(opts.output);\n  });\n\n  if (opts.watch) {\n    var w = watchify(b);\n    var bundling = false;\n    var queued = false;\n\n    var bundle = function () {\n      if (!bundling) {\n        bundling = true;\n        b.bundle();\n      } else {\n        queued = true;\n      }\n    };\n    w.on('update', bundle);\n    b.on('bundle', function (out) {\n      function next() {\n        bundling = false;\n        if (queued) {\n          queued = false;\n          setImmediate(bundle);\n        }\n      }\n      out.on('error', next);\n      out.on('end', next);\n    });\n\n    process.on('SIGINT', function () {\n      w.close();\n      setTimeout(function () {\n        process.exit(0);\n      }, 50);\n    });\n\n    // Hack for Windows:\n    if (require('os').platform() === 'win32') {\n      var readline = require('readline');\n      var rl = readline.createInterface({\n        input  : process.stdin,\n        output : process.stdout\n      });\n      rl.on('SIGINT', function () {\n        process.emit('SIGINT');\n      });\n    }\n  }\n\n  return b;\n};\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/lib/cover.js":"/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar through = require('through2');\nvar resolve = require('resolve');\nvar spawn   = require('child_process').spawn;\n\n\nfunction coverifySplit(coverifyIn) {\n  var buf = '';\n  return through(function (chunk, enc, next) {\n    var p, w = '';\n    buf += chunk;\n    while (buf.length > 4) {\n      p = buf.indexOf('COVER');\n      if (p === -1) {\n        w += buf.substring(0, buf.length - 5);\n        buf = buf.substring(buf.length - 5);\n        break;\n      }\n      if (p !== 0) {\n        w += buf.substring(0, p);\n        buf = buf.substring(p);\n      }\n      p = buf.indexOf('\\n');\n      if (p === -1) {\n        break;\n      }\n      coverifyIn.write(buf.substring(0, p + 1));\n      buf = buf.substring(p + 1);\n    }\n    if (w) {\n      this.push(w);\n    }\n    next();\n  }, function (next) {\n    if (buf.length) {\n      this.push(buf);\n    }\n    coverifyIn.end();\n    next();\n  });\n}\n\nvar coverifyBin = resolve.sync('coverify', {\n  baseDir: __dirname,\n  packageFilter: function (pkg) {\n    return { main : pkg.bin.coverify };\n  }\n});\n\nmodule.exports = function (b) {\n\n  function apply() {\n    var a = [coverifyBin];\n    if (process.stderr.isTTY) {\n      a.push('--color');\n    }\n    var c = spawn('node', a);\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n    c.on('exit', function (code) {\n      if (code) {\n        b.emit('error', new Error('Exit ' + code));\n      }\n    });\n    b.pipeline.get('wrap').push(coverifySplit(c.stdin));\n  }\n\n  apply();\n  b.on('reset', apply);\n\n};\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/lib/node.js":"/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar spawn        = require('child_process').spawn;\nvar through      = require('through2');\nvar sourceMapper = require('source-mapper');\nvar trace        = require('./trace');\n\n\nmodule.exports = function (b, opts) {\n\n  function apply() {\n    var n = spawn('node');\n    var out = through();\n    var js = '';\n    var wrap = b.pipeline.get('wrap');\n    var t = through(function (chunk, enc, next) {\n      js += chunk;\n      next();\n    }, function (next) {\n      if (!js) {\n        n.kill();\n        next();\n        return;\n      }\n      if (opts.reporter !== 'xunit') {\n        opts.output.write('# node:\\n');\n      }\n      var x = sourceMapper.extract(js);\n      var s1 = sourceMapper.stream(x.map);\n      var s2 = sourceMapper.stream(x.map);\n      n.stdout.pipe(s1).pipe(trace()).pipe(out);\n      n.stderr.pipe(s2).pipe(trace()).pipe(process.stderr);\n      n.on('exit', function (code) {\n        if (code) {\n          b.emit('error', new Error('Exit ' + code));\n        }\n        next();\n      });\n      n.stdin.write(x.js);\n      n.stdin.end();\n    });\n    wrap.push(t);\n    wrap.push(out);\n    b.pipeline.on('error', function () {\n      js = '';\n      t.end();\n    });\n  }\n\n  apply();\n  b.on('reset', apply);\n\n};\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/lib/trace.js":"/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar path    = require('path');\nvar through = require('through2');\n\n\nvar TRACE_RE  = /^\\s+.+:[0-9]+/;\nvar IGNORE_RE = /node_modules\\/(browserify|browser\\-pack|mocha|mocaccino)\\//;\nvar SOURCE_RE = /([ \\(])(?:[A-Z]\\:)?(\\/[^:]+)/;\n\nvar cwd = process.cwd();\n\nfunction relativePath(_, prefix, source) {\n  return prefix + path.relative(cwd, source);\n}\n\nfunction tracebackFormatter() {\n  var buf = '';\n  return through(function (chunk, enc, next) {\n    buf += chunk;\n    var l, p = buf.indexOf('\\n');\n    var w = '';\n    while (p !== -1) {\n      l = buf.substring(0, p);\n      if (TRACE_RE.test(l)) {\n        if (!IGNORE_RE.test(l)) {\n          l = l.replace(SOURCE_RE, relativePath);\n          w += l + '\\n';\n        }\n      } else {\n        w += l + '\\n';\n      }\n      buf = buf.substring(p + 1);\n      p = buf.indexOf('\\n');\n    }\n    if (!/^\\s+/.test(buf) || (buf.length > 3 && !/^\\s+at /.test(buf))) {\n      w += buf;\n      buf = '';\n    }\n    if (w) {\n      this.push(w);\n    }\n    next();\n  });\n}\n\nmodule.exports = tracebackFormatter;\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/lib/phantom.js":"/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar through   = require('through2');\nvar phantomic = require('phantomic');\nvar trace     = require('./trace');\nvar which     = require('which');\n\nmodule.exports = function (b, opts) {\n\n  var done;\n  var input;\n  var output;\n\n  /**\n   * Finds global or local PhantomJS installation and uses its executable\n   * filepath.\n   * Overridden by opts.phantomjs.\n   * @returns {(string|undefined)} Path to PhantomJS executable, if present\n   */\n  function findPhantomJS() {\n    var filepath;\n\n    if (opts.phantomjs) {\n      return opts.phantomjs;\n    }\n\n    try {\n      filepath = which.sync('phantomjs');\n    } catch (e) {\n      // ignored\n      try {\n        filepath = require.resolve('phantomjs/bin/phantomjs');\n      } catch (ignore) {\n        // ignored\n      }\n    }\n    return filepath;\n  }\n\n  function launch() {\n    var phantomPath = findPhantomJS();\n    input  = through();\n    output = phantomic(input, {\n      debug          : opts.debug,\n      port           : opts.port,\n      brout          : true,\n      phantomjs      : phantomPath,\n      'web-security' : opts['web-security'],\n      'ignore-ssl-errors': opts['ignore-ssl-errors']\n    }, function (code) {\n      if (code) {\n        b.emit('error', new Error('Exit ' + code));\n      }\n      if (done) {\n        done();\n        done = null;\n        output = null;\n        if (opts.watch) {\n          launch();\n        }\n      }\n    });\n  }\n\n  launch();\n\n  function apply() {\n    var wrap = b.pipeline.get('wrap');\n\n    wrap.push(through(function (chunk, enc, next) {\n      if (input) {\n        input.write(chunk);\n      }\n      next();\n    }, function (next) {\n      if (opts.reporter !== 'xunit') {\n        opts.output.write('# phantomjs:\\n');\n      }\n      done = next;\n      if (input) {\n        input.end();\n      }\n    }));\n\n    wrap.push(output.pipe(trace()));\n  }\n\n  apply();\n  b.on('reset', apply);\n  b.on('bundle', function (bundle) {\n    bundle.on('error', function () {\n      if (input) {\n        input.end();\n        input = null;\n        if (opts.watch) {\n          launch();\n        }\n      }\n    });\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/lib/consolify.js":"/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar fs        = require('fs');\nvar through   = require('through2');\nvar consolify = require('consolify');\n\nmodule.exports = function (b, opts) {\n  consolify(b, {\n    bundle: opts.bundle\n  });\n\n  function apply() {\n    var file = '';\n    b.pipeline.get('wrap').push(through(function (chunk, enc, next) {\n      file += chunk;\n      next();\n    }, function (next) {\n      /*eslint no-sync: 0*/\n      fs.writeFileSync(opts.consolify, file);\n      if (opts.watch) {\n        console.log('Generated ' + opts.consolify);\n      }\n      next();\n    }));\n  }\n\n  apply();\n  b.on('reset', apply);\n};\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/lib/args.js":"/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar subarg = require('subarg');\n\nvar defaults = {\n  watch     : false,\n  cover     : false,\n  node      : false,\n  debug     : false,\n  wd        : false,\n  recursive : false,\n  'ignore-ssl-errors': false,\n  'browser-field': true,\n  reporter  : 'spec',\n  timeout   : '2000',\n  port      : '0',\n  yields    : '0',\n  colors    : null\n};\n\nfunction args(argv) {\n  var opts = subarg(argv, {\n    string     : ['reporter', 'ui', 'phantomjs', 'consolify', 'timeout',\n                  'port', 'yields', 'transform', 'plugin', 'grep', 'url',\n                  'require', 'extension', 'web-security', 'bundle',\n                  'wd-file', 'path', 'external'],\n    boolean    : ['help', 'version', 'watch', 'cover', 'node', 'wd',\n                  'debug', 'invert', 'recursive', 'colors',\n                  'ignore-ssl-errors', 'browser-field'],\n    alias      : {\n      help     : 'h',\n      version  : 'v',\n      watch    : 'w',\n      reporter : 'R',\n      ui       : 'U',\n      timeout  : 't',\n      yields   : 'y',\n      require  : 'r'\n    },\n    default    : defaults,\n    unknown: function (arg) {\n      if (arg.indexOf('-') === 0) {\n        console.log('Unknown argument: ' + arg);\n        console.log('Run `mochify --help` for usage.\\n');\n        process.exit(1);\n      }\n    }\n  });\n\n  if (opts.help) {\n    /*eslint no-sync: 0*/\n    console.log(require('fs').readFileSync(__dirname + '/help.txt', 'utf8'));\n    process.exit(0);\n  }\n  if (opts.version) {\n    console.log(require('../package.json').version);\n    process.exit(0);\n  }\n\n  ['timeout', 'port', 'yields'].forEach(function (prop) {\n    if (opts.hasOwnProperty(prop)) {\n      opts[prop] = parseInt(opts[prop], 10);\n    }\n  });\n\n  if (opts.hasOwnProperty('web-security')) {\n    opts['web-security'] = opts['web-security'] === 'true';\n  }\n\n  return opts;\n}\n\nargs.defaults = defaults;\n\nmodule.exports = args;\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/bin/cmd.js":"#!/usr/bin/env node\n/*\n * mochify.js\n *\n * Copyright (c) 2014 Maximilian Antoni <mail@maxantoni.de>\n *\n * @license MIT\n */\n'use strict';\n\nvar mochify = require('../lib/mochify');\nvar args    = require('../lib/args');\n\nvar opts = args(process.argv.slice(2));\nvar _    = opts._.length\n  ? opts._.join(' ')\n  : null;\n\nfunction error() {\n  if (!opts.watch) {\n    process.nextTick(function () {\n      process.exit(1);\n    });\n  }\n}\n\nmochify(_, opts)\n  .on('error', error)\n  .bundle();\n","/home/travis/build/npmtest/node-npmtest-mochify/node_modules/mochify/scripts/postinstall.js":"#!/usr/bin/env node\n\n'use strict';\n\n/**\n * This script attempts to find:\n *\n * - a locally installed or linked PhantomJS\n * - a PhantomJS in the PATH\n *\n * if neither of those are found, it will install PhantomJS locally.\n */\n\nfunction log(msg) {\n  var args = Array.prototype.slice(arguments, 1);\n  args.unshift('=> ' + msg);\n  console.log.apply(console, args);\n}\n\nfunction installPhantom(callback) {\n  var exec = require('child_process').exec;\n\n  log('Attempting to install PhantomJS locally');\n  var install = exec('npm install phantomjs', function (err) {\n    if (err) {\n      return callback('Failed to install PhantomJS.  Do it manually');\n    }\n    log('Successfully installed PhantomJS.  To link it globally, '\n      + 'execute:\\n\\tcd node_modules/phantomjs && npm link');\n    callback();\n  });\n  install.stdout.pipe(process.stdout);\n  install.stderr.pipe(process.stderr);\n}\n\nfunction whichPhantom(callback) {\n  require('which')('phantomjs', function (err) {\n    if (err) {\n      log('PhantomJS not present in PATH');\n      return installPhantom(callback);\n    }\n    log('PhantomJS found in PATH');\n    callback();\n  });\n}\n\nfunction lstatPhantom(callback) {\n  var localPhantomPath = require('path').join(__dirname,\n      '..',\n      'node_modules',\n      'phantomjs');\n  require('fs').lstat(localPhantomPath, function (err, stats) {\n    if (err) {\n      log('PhantomJS not present locally; checking PATH');\n      return whichPhantom(callback);\n    }\n    if (!stats.isSymbolicLink()) {\n      log('PhantomJS present as local package');\n    } else {\n      log('PhantomJS already linked');\n    }\n    callback();\n  });\n}\n\nfunction main() {\n  log('Finding PhantomJS');\n\n  lstatPhantom(function (err) {\n    if (err) {\n      return log('Mochify installed with warning(s): ' + err);\n    }\n    log('Mochify install complete!');\n  });\n}\n\nif (require.main === module) {\n  main();\n}\n\n"}